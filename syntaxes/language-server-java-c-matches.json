[
  { "name": "keyword.spec", "match": "resource" },
  { "name": "keyword.spec", "match": "process" },
  { "name": "keyword.spec", "match": "frac" },
  { "name": "keyword.spec", "match": "zfrac" },
  { "name": "keyword.spec", "match": "bool" },
  { "name": "keyword.spec", "match": "ref" },
  { "name": "keyword.spec", "match": "rational" },
  { "name": "type.spec", "match": "seq" },
  { "name": "type.spec", "match": "set" },
  { "name": "type.spec", "match": "bag" },
  { "name": "type.spec", "match": "pointer" },
  { "name": "type.spec", "match": "map" },
  { "name": "type.spec", "match": "option" },
  { "name": "type.spec", "match": "either" },
  { "name": "type.spec", "match": "tuple" },
  { "name": "type.spec", "match": "type" },
  { "name": "type.spec", "match": "any" },
  { "name": "type.spec", "match": "nothing" },
  { "name": "type.spec", "match": "string" },
  { "name": "type.spec", "match": "pure" },
  { "name": "type.spec", "match": "thread_local" },
  { "name": "keyword.spec", "match": "bip_annotation" },
  { "name": "keyword.control.spec", "match": "with" },
  { "name": "keyword.control.spec", "match": "then" },
  { "name": "keyword.control.spec", "match": "given" },
  { "name": "keyword.control.spec", "match": "yields" },
  { "name": "type.spec", "match": "axiom" },
  { "name": "type.spec", "match": "model" },
  { "name": "type.spec", "match": "adt" },
  { "name": "type.spec", "match": "prover_type" },
  { "name": "type.spec", "match": "prover_function" },
  { "name": "keyword.spec", "match": "modifies" },
  { "name": "keyword.spec", "match": "accessible" },
  { "name": "keyword.spec", "match": "requires" },
  { "name": "keyword.spec", "match": "ensures" },
  { "name": "keyword.spec", "match": "context_everywhere" },
  { "name": "keyword.spec", "match": "context" },
  { "name": "keyword.spec", "match": "loop_invariant" },
  { "name": "keyword.spec", "match": "kernel_invariant" },
  { "name": "keyword.spec", "match": "lock_invariant" },
  { "name": "keyword.spec", "match": "signals" },
  { "name": "keyword.spec", "match": "decreases" },
  { "name": "keyword.spec", "match": "apply" },
  { "name": "keyword.spec", "match": "fold" },
  { "name": "keyword.spec", "match": "unfold" },
  { "name": "keyword.spec", "match": "open" },
  { "name": "keyword.spec", "match": "close" },
  { "name": "keyword.spec", "match": "assume" },
  { "name": "keyword.spec", "match": "inhale" },
  { "name": "keyword.spec", "match": "exhale" },
  { "name": "keyword.spec", "match": "label" },
  { "name": "keyword.spec", "match": "extract" },
  { "name": "keyword.spec", "match": "frame" },
  { "name": "keyword.spec", "match": "outline" },
  { "name": "keyword.spec", "match": "refute" },
  { "name": "keyword.spec", "match": "witness" },
  { "name": "keyword.spec", "match": "ghost" },
  { "name": "keyword.spec", "match": "send" },
  { "name": "keyword.spec", "match": "to" },
  { "name": "keyword.spec", "match": "recv" },
  { "name": "keyword.spec", "match": "from" },
  { "name": "keyword.spec", "match": "transfer" },
  { "name": "keyword.spec", "match": "csl_subject" },
  { "name": "keyword.spec", "match": "spec_ignore" },
  { "name": "keyword.spec", "match": "action" },
  { "name": "keyword.spec", "match": "atomic" },
  { "name": "keyword.spec", "match": "commit" },
  { "name": "keyword.spec", "match": "Reducible" },
  { "name": "keyword.spec", "match": "AddsTo" },
  { "name": "keyword.spec", "match": "APerm" },
  { "name": "keyword.spec", "match": "ArrayPerm" },
  { "name": "keyword.spec", "match": "Contribution" },
  { "name": "keyword.spec", "match": "held" },
  { "name": "keyword.spec", "match": "committed" },
  { "name": "keyword.spec", "match": "HPerm" },
  { "name": "keyword.spec", "match": "idle" },
  { "name": "keyword.spec", "match": "perm" },
  { "name": "keyword.spec", "match": "Perm" },
  { "name": "keyword.spec", "match": "PointsTo" },
  { "name": "keyword.spec", "match": "running" },
  { "name": "keyword.spec", "match": "Some" },
  { "name": "keyword.spec", "match": "Left" },
  { "name": "keyword.spec", "match": "Right" },
  { "name": "keyword.spec", "match": "Value" },
  { "name": "keyword.spec", "match": "none" },
  { "name": "keyword.spec", "match": "None" },
  { "name": "keyword.spec", "match": "write" },
  { "name": "keyword.spec", "match": "read" },
  { "name": "keyword.spec", "match": "empty" },
  { "name": "keyword.other", "match": "inline" },
  { "name": "keyword.other", "match": "assert" },
  { "name": "meta.", "match": "package" },
  { "name": "storage.type", "match": "enum" },
  { "name": "storage.type", "match": "class" },
  { "name": "keyword.control.concurrency", "match": "seq_program" },
  { "name": "keyword.control.concurrency", "match": "kernel" },
  { "name": "keyword.control.concurrency", "match": "barrier" },
  { "name": "keyword.control.concurrency", "match": "invariant" },
  { "name": "variable.language", "match": "constructor" },
  { "name": "keyword.control.concurrency", "match": "run" },
  { "name": "keyword.control.concurrency", "match": "thread" },
  { "name": "keyword.control", "match": "if" },
  { "name": "keyword.control", "match": "else" },
  { "name": "keyword.control", "match": "while" },
  { "name": "keyword.control", "match": "for" },
  { "name": "keyword.control", "match": "goto" },
  { "name": "keyword.control", "match": "return" },
  { "name": "variable.language", "match": "vec" },
  { "name": "keyword.control.concurrency", "match": "par" },
  { "name": "keyword.control.concurrency", "match": "and" },
  { "name": "keyword.control.concurrency", "match": "parallel" },
  { "name": "keyword.control.concurrency", "match": "sequential" },
  { "name": "keyword.control", "match": "block" },
  { "name": "keyword.control.concurrency", "match": "lock" },
  { "name": "keyword.control.concurrency", "match": "unlock" },
  { "name": "keyword.control.concurrency", "match": "wait" },
  { "name": "keyword.control.concurrency", "match": "notify" },
  { "name": "keyword.control.concurrency", "match": "fork" },
  { "name": "keyword.control.concurrency", "match": "join" },
  { "name": "variable.language", "match": "this" },
  { "name": "variable.language", "match": "null" },
  { "name": "variable.language", "match": "true" },
  { "name": "variable.language", "match": "false" },
  { "name": "variable.language", "match": "current_thread" },
  { "name": "storage.modifier", "match": "global" },
  { "name": "storage.modifier", "match": "local" },
  { "name": "storage.modifier", "match": "static" },
  { "name": "storage.modifier", "match": "final" },
  { "name": "variable.language", "match": "in" },
  { "name": "variable.language", "match": "new" },
  { "name": "variable.language", "match": "id" },
  { "name": "keyword.type", "match": "boolean" },
  { "name": "keyword.type", "match": "void" },
  { "name": "keyword.type", "match": "int" },
  { "name": "keyword.type", "match": "char" },
  { "name": "keyword.type", "match": "float32" },
  { "name": "keyword.type", "match": "float64" }
]
